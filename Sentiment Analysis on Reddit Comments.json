{"operators":[{"operatorID":"CSVFileScan-operator-2378e233-aa1c-437c-b7d6-34a90814b119","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"Justin Albert Fortino/uci_comments_2010_2023.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-0ff1803b-f383-4039-ba6d-225eefadec49","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-2f6e3d0b-3971-4d34-a266-8e087873fc06","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n#from vaderSentiment import SentimentIntensityAnalyzer\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            analyzer = SentimentIntensityAnalyzer()\n            selftext = tuple_['body']\n            if selftext is not None:\n                tuple_['sentiment_score'] = analyzer.polarity_scores(selftext)['compound']\n            else:\n                tuple_['sentiment_score'] = 0\n            yield tuple_\n","retainInputColumns":true,"outputColumns":[{"attributeName":"sentiment_score","attributeType":"double"}],"workers":6},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true,"isCached":false},{"operatorID":"PythonUDFV2-operator-d43883b8-7cd9-43cf-9885-116c9c687f42","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"created_utc\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-6b4960cd-6fea-4669-b0f8-11299466ce9d","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-cf0e504c-8b5a-4a88-b366-c2a21b5a2466","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of r/ucmerced Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-17400554-a98e-4e7d-bbb0-435b4f1a0a5d","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"CSVFileScan-operator-2da47e79-cb8c-4555-ae59-8e0d104d5678","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"limit":null,"offset":null,"fileName":"Warren Register/uci_posts_2010_2023.csv"},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":true,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-d0f1afb4-f8dc-4b48-a0ad-dfbc58458761","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom pytexera import *\n#\n\nclass ProcessBatchOperator(UDFBatchOperator):\n    BATCH_SIZE = 10 # must be a positive integer\n\n    @overrides\n    def process_batch(self, batch: Batch, port: int) -> Iterator[Optional[BatchLike]]:\n        yield batch\n\n","retainInputColumns":true,"outputColumns":[],"workers":null},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":true,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true},{"operatorID":"CSVFileScan-operator-83073f52-5dab-4cd9-bbdd-3e3402f943cf","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"limit":null,"offset":null,"fileName":"Melissa Kang/uci_comments_2010_2023.csv"},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":true,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false,"isCached":false},{"operatorID":"PythonUDFV2-operator-092e460c-4113-4ffa-9a19-bad24a6074a8","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"# Choose from the following templates:\nfrom pytexera import *\nfrom transformers import AutoModelForSequenceClassification, AutoTokenizer\nimport tqdm\n# \nclass ProcessTupleOperator(UDFOperatorV2):\n#     \n    @overrides\n    def process_tuple(self, tuple_: Tuple, port: int) -> Iterator[Optional[TupleLike]]:\n        # distil-model is a distiled (smaller but similar performance) version of the original model \n        tokenizer = AutoTokenizer.from_pretrained(\"distilroberta-base\")\n\n        # Load the pre-trained model\n        transformer_model = AutoModelForSequenceClassification.from_pretrained(\"distilroberta-base\")\n\n        def text_to_tensor(\n            list_text_X_train: list,\n            transformer_model: AutoModelForSequenceClassification,\n            tokenizer: AutoTokenizer,\n            device: str,\n            ) -> np.ndarray:\n            # Tokenize each text in the list one by one\n            tokenized_text_X_train_split = [tokenizer.encode(text_x_train, return_tensors=\"pt\", truncation=True)\n                for text_x_train in list_text_X_train\n            ]\n\n            # Send the model to the device\n            transformer_model = transformer_model.to(device)\n            output_hidden_states_list = [None] * len(tokenized_text_X_train_split)\n\n            for i, tokenized_x in enumerate(tqdm.tqdm(tokenized_text_X_train_split)):\n                # Pass the tokens through the transformer model and get the hidden states\n                # Only keep the last hidden layer state for now\n                output_hidden_states = transformer_model(tokenized_x.to(device), output_hidden_states=True)[\n                    1\n                ][-1]\n                # Average over the tokens axis to get a representation at the text level.\n                output_hidden_states = output_hidden_states.mean(dim=1)\n                output_hidden_states = output_hidden_states.detach().cpu().numpy()\n                output_hidden_states_list[i] = output_hidden_states\n\n            return np.concatenate(output_hidden_states_list, axis=0)\n\n        all_hidden_states = text_to_tensor(list(subreddit_data.text), transformer_model, tokenizer, device)\n        tuple_[\"hidden_states\"] = all_hidden_states\n\n        yield tuple_\n \n# class ProcessBatchOperator(UDFBatchOperator):\n#     BATCH_SIZE = 10 # must be a positive integer\n# \n#     @overrides\n#     def process_batch(self, batch: Batch, port: int) -> Iterator[Optional[BatchLike]]:\n#         yield batch\n# \n# class ProcessTableOperator(UDFTableOperator):\n# \n#     @overrides\n#     def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n#         yield table\n","retainInputColumns":true,"outputColumns":[{"attributeName":"hidden_states","attributeType":"ANY"}],"workers":1},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":true,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true},{"operatorID":"SimpleSink-operator-1c53b1e4-5790-48dd-9840-5d6865bc5b84","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":true,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-e22bc199-92b0-415a-8576-34f9ea5314b2","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-cc09d5a9-7165-42ab-a4cb-7b137abde53e","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"Justin Albert Fortino/ucmerced_comments_2010_2023present.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-2e7eb242-42a8-4881-bd40-aa394cdaf7c6","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-b7149a2b-54f9-4180-a8ef-e7647a8202c7","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n#from vaderSentiment import SentimentIntensityAnalyzer\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            analyzer = SentimentIntensityAnalyzer()\n            selftext = tuple_['body']\n            if selftext is not None:\n                tuple_['sentiment_score'] = analyzer.polarity_scores(selftext)['compound']\n            else:\n                tuple_['sentiment_score'] = 0\n            yield tuple_\n","retainInputColumns":true,"outputColumns":[{"attributeName":"sentiment_score","attributeType":"double"}],"workers":6},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true,"isCached":false},{"operatorID":"PythonUDFV2-operator-bad59eab-34a4-4522-ae50-fd5c8240c470","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"created_utc\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-c7f1280c-2b11-4b09-8a63-6f03cdfa70d1","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-b7790a5e-86fe-4c51-9460-501ebdf9094c","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of r/ucmerced Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-00c135c5-3704-4e16-903e-b0c9526a473a","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-1cfe1b3c-5d1b-44eb-b093-043af489400d","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-5b408cc3-bc34-4a3f-99a1-6ccfde0d2d8c","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"Justin Albert Fortino/ucr_comments_2010_2023.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-6b2113be-3bd6-4f27-9068-22f5e9049eb1","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-cf5f2dd9-e8c1-485c-8e0d-213738c6dba8","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n#from vaderSentiment import SentimentIntensityAnalyzer\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            analyzer = SentimentIntensityAnalyzer()\n            selftext = tuple_['body']\n            if selftext is not None:\n                tuple_['sentiment_score'] = analyzer.polarity_scores(selftext)['compound']\n            else:\n                tuple_['sentiment_score'] = 0\n            yield tuple_\n","retainInputColumns":true,"outputColumns":[{"attributeName":"sentiment_score","attributeType":"double"}],"workers":6},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true,"isCached":false},{"operatorID":"PythonUDFV2-operator-5919c5eb-1ad9-45d3-a30e-103f3bf1b908","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"created_utc\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-81dc18e2-bf73-4d9f-b49d-9f4cd9908fe5","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-19d5fa0d-0ca5-4c4d-9f8c-bf0300944a98","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of r/ucmerced Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-e9b5face-8225-44bf-83cf-d9c2e337cb27","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-ac822658-13b9-4228-8106-6a59694a1cbd","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-49536f2e-e2f5-4483-97af-4e371ef584b9","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"Justin Albert Fortino/ucsc_comments_2010_2023.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-aca6c9dd-a876-4c1d-a780-103cfae5823a","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-fca88380-822d-4904-992b-8e3dc3035fc6","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n#from vaderSentiment import SentimentIntensityAnalyzer\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            analyzer = SentimentIntensityAnalyzer()\n            selftext = tuple_['body']\n            if selftext is not None:\n                tuple_['sentiment_score'] = analyzer.polarity_scores(selftext)['compound']\n            else:\n                tuple_['sentiment_score'] = 0\n            yield tuple_\n","retainInputColumns":true,"outputColumns":[{"attributeName":"sentiment_score","attributeType":"double"}],"workers":6},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true,"isCached":false},{"operatorID":"PythonUDFV2-operator-e6138274-9a84-4361-a276-7d00edd1d27a","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"created_utc\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-189a260b-8768-4e03-936f-9b6de03b85f8","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-415855a0-ffa4-4748-b6d8-f076d768c1c1","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of r/ucmerced Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-2fcf9061-b1a1-4ec9-aece-8d6ac6b8ca36","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-ab791ca1-68c9-463e-8d25-a5e7b919a289","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-bc863e40-b1c3-4e41-bb9d-334b8d05cdec","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"Justin Albert Fortino/ucsantabarbara_comments_2010_2023.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-37c271ec-8a5b-4dd5-a6f4-54f1db5b5956","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-14ebdb61-a0fb-4848-9c52-0836e8b362ef","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n#from vaderSentiment import SentimentIntensityAnalyzer\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            analyzer = SentimentIntensityAnalyzer()\n            selftext = tuple_['body']\n            if selftext is not None:\n                tuple_['sentiment_score'] = analyzer.polarity_scores(selftext)['compound']\n            else:\n                tuple_['sentiment_score'] = 0\n            yield tuple_\n","retainInputColumns":true,"outputColumns":[{"attributeName":"sentiment_score","attributeType":"double"}],"workers":6},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true,"isCached":false},{"operatorID":"PythonUDFV2-operator-840a090f-af5a-424b-a9da-fe02ced2e8d9","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"created_utc\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-05bb09ad-b31a-4d27-a14a-9cd5f84f022d","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-6758bb15-ab92-44e3-80c8-9dda7f7fcf34","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of r/ucmerced Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-12d94012-6a88-4754-bc48-9fa74f92dec1","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-f1caf1cf-5741-4117-be09-c834f4dfdcd8","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-85c6874d-fe4c-45ef-afe6-42a8de78c1de","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"Justin Albert Fortino/ucdavis_comments_2010_2023_combined.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-5e66f183-26c0-4f63-8e1d-d6234918be66","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-3ad4a911-5121-47bf-ae93-17db47e6db66","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n#from vaderSentiment import SentimentIntensityAnalyzer\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            analyzer = SentimentIntensityAnalyzer()\n            selftext = tuple_['body']\n            if selftext is not None:\n                tuple_['sentiment_score'] = analyzer.polarity_scores(selftext)['compound']\n            else:\n                tuple_['sentiment_score'] = 0\n            yield tuple_\n","retainInputColumns":true,"outputColumns":[{"attributeName":"sentiment_score","attributeType":"double"}],"workers":6},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true,"isCached":false},{"operatorID":"PythonUDFV2-operator-ed95d53c-20aa-4483-b8b5-76fc38d5e283","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"created_utc\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-d6f9fa3e-1e28-4643-9c98-ccaa507e918b","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-0c2a50dd-6c75-4d5c-a042-67e698d87401","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of r/ucmerced Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-7a9ea06e-52f3-4de3-9545-8cde0e01bc13","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-0b40d928-4958-4455-874e-b44ee5b9ac40","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-b045e22f-3dc2-43d6-b7d2-70b343d549ba","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"Justin Albert Fortino/ucsd_comments_2010_2023_combined.csv","offset":null,"limit":1000000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-2fd664a8-3237-4d8c-adbe-0020c04a69d8","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-bb4495c0-1541-4a6b-84ae-688b5689c741","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n#from vaderSentiment import SentimentIntensityAnalyzer\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            analyzer = SentimentIntensityAnalyzer()\n            selftext = tuple_['body']\n            if selftext is not None:\n                tuple_['sentiment_score'] = analyzer.polarity_scores(selftext)['compound']\n            else:\n                tuple_['sentiment_score'] = 0\n            yield tuple_\n","retainInputColumns":true,"outputColumns":[{"attributeName":"sentiment_score","attributeType":"double"}],"workers":6},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true,"isCached":false},{"operatorID":"PythonUDFV2-operator-06a1f4cf-cdb0-46f6-9960-d5c973b0a74f","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"created_utc\"]).split(\"-\")\n            if len(split_res) > 1:\n                tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            else:\n                tuple_[\"month\"] = split_res[0]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-9c5def48-cc73-4505-8a58-4aa793c4bba7","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-5fb51bbb-8df1-46a2-bf50-35175149123d","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of r/ucmerced Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-af6badf1-fe0f-45a7-ac43-de1c78366227","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-2c1ad623-e6b6-479b-b96f-5e6b1687515e","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-c0adbe26-808d-4b1e-a9d8-1194b6ff57e6","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"Justin Albert Fortino/berkeley_comments_2010_2023_combined.csv","offset":null,"limit":1000000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-697407f6-9e22-49fd-a1da-06debf87d93a","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-7c9f3438-c2e6-4969-be54-6f7ef7878fc8","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n#from vaderSentiment import SentimentIntensityAnalyzer\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            analyzer = SentimentIntensityAnalyzer()\n            selftext = tuple_['body']\n            if selftext is not None:\n                tuple_['sentiment_score'] = analyzer.polarity_scores(selftext)['compound']\n            else:\n                tuple_['sentiment_score'] = 0\n            yield tuple_\n","retainInputColumns":true,"outputColumns":[{"attributeName":"sentiment_score","attributeType":"double"}],"workers":6},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true,"isCached":false},{"operatorID":"PythonUDFV2-operator-666b4326-9c4e-481f-a808-bb6004e1c70f","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"created_utc\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-a39bbbae-6930-4786-a182-9e8d0ad08c20","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-37032397-8784-43d0-80c5-1cdec00755cd","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of r/ucmerced Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-c37a160e-2607-4049-93f1-c7d3ac6c514d","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-c4e92db5-a826-40b2-8d39-cb881581a52f","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-b723bb50-91d2-4bbd-98c2-d41824b67472","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"Justin Albert Fortino/ucla_comments_2010_2023.csv","offset":null,"limit":1000000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-6b2841eb-69ae-4162-b388-996fa5316978","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-de55b8a7-3ea6-45ca-8442-8710314362a6","operatorType":"PythonUDFV2","operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n#from vaderSentiment import SentimentIntensityAnalyzer\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            analyzer = SentimentIntensityAnalyzer()\n            selftext = tuple_['body']\n            if selftext is not None:\n                tuple_['sentiment_score'] = analyzer.polarity_scores(selftext)['compound']\n            else:\n                tuple_['sentiment_score'] = 0\n            yield tuple_\n","retainInputColumns":true,"outputColumns":[{"attributeName":"sentiment_score","attributeType":"double"}],"workers":6},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":true,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Python UDF","dynamicInputPorts":true,"dynamicOutputPorts":true,"isCached":false},{"operatorID":"PythonUDFV2-operator-9832e068-7502-4a9d-8eef-f78791fee9ab","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"created_utc\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-bcd1a24c-da05-441f-9e8e-ef0ce8ac5541","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-42d7f581-c0ce-4eb0-adf7-c18213f97a57","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/UCLA Comments Over Time')) \n        \"\"\"\n        chart = px.scatter(x=table['month'], y=table['monthly_sentiment'], \n                opacity=0.65, trendline='lowess', trendline_color_override='red', \n                title='Average Monthly Sentiment Score of r/UCI Comments Over Time').update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\")\"\"\"\n        yield Table(pandas.DataFrame({'output':[to_html(chart)]}))\n\n","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-ff22583f-e7a7-4ba6-9812-a0794d6d9fad","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-b3a42b9d-2ee4-42fb-b6a5-8b87e7284240","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-e4340b7b-97dd-47a4-92a2-b85c7d08ee23","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-4b483c0c-5cce-44af-8137-c75aa3098430","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-7e6c4aeb-3088-4c1c-bd2c-43f1707e419e","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-911e0d9b-3e5f-4096-b53b-753e88476ced","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-92d6c144-ca7b-4070-a45b-fb84a889b8cc","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-40de5080-e7ca-4e0b-9c76-69fc5dc896e1","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-7e656da7-761e-4868-a025-caf941a07c90","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-0dff3731-d037-4cc4-acb8-93d84566e7f7","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-e10286f5-1e49-4643-ba4a-ab3884763e47","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false}],"operatorPositions":{"CSVFileScan-operator-2378e233-aa1c-437c-b7d6-34a90814b119":{"x":2,"y":80},"SimpleSink-operator-0ff1803b-f383-4039-ba6d-225eefadec49":{"x":838,"y":0},"PythonUDFV2-operator-2f6e3d0b-3971-4d34-a266-8e087873fc06":{"x":140,"y":80},"PythonUDFV2-operator-d43883b8-7cd9-43cf-9885-116c9c687f42":{"x":278,"y":2},"Aggregate-operator-6b4960cd-6fea-4669-b0f8-11299466ce9d":{"x":418,"y":0},"PythonUDFV2-operator-cf0e504c-8b5a-4a88-b366-c2a21b5a2466":{"x":550,"y":2},"HTMLVisualizer-operator-17400554-a98e-4e7d-bbb0-435b4f1a0a5d":{"x":700,"y":0},"CSVFileScan-operator-2da47e79-cb8c-4555-ae59-8e0d104d5678":{"x":28,"y":1248},"PythonUDFV2-operator-d0f1afb4-f8dc-4b48-a0ad-dfbc58458761":{"x":168,"y":1248},"CSVFileScan-operator-83073f52-5dab-4cd9-bbdd-3e3402f943cf":{"x":20,"y":1098},"PythonUDFV2-operator-092e460c-4113-4ffa-9a19-bad24a6074a8":{"x":160,"y":1098},"SimpleSink-operator-1c53b1e4-5790-48dd-9840-5d6865bc5b84":{"x":300,"y":1098},"SimpleSink-operator-e22bc199-92b0-415a-8576-34f9ea5314b2":{"x":288,"y":156},"CSVFileScan-operator-cc09d5a9-7165-42ab-a4cb-7b137abde53e":{"x":0,"y":-230},"SimpleSink-operator-2e7eb242-42a8-4881-bd40-aa394cdaf7c6":{"x":832,"y":-310},"PythonUDFV2-operator-b7149a2b-54f9-4180-a8ef-e7647a8202c7":{"x":138,"y":-230},"PythonUDFV2-operator-bad59eab-34a4-4522-ae50-fd5c8240c470":{"x":276,"y":-312},"Aggregate-operator-c7f1280c-2b11-4b09-8a63-6f03cdfa70d1":{"x":416,"y":-312},"PythonUDFV2-operator-b7790a5e-86fe-4c51-9460-501ebdf9094c":{"x":556,"y":-310},"HTMLVisualizer-operator-00c135c5-3704-4e16-903e-b0c9526a473a":{"x":694,"y":-310},"SimpleSink-operator-1cfe1b3c-5d1b-44eb-b093-043af489400d":{"x":278,"y":-154},"CSVFileScan-operator-5b408cc3-bc34-4a3f-99a1-6ccfde0d2d8c":{"x":-4,"y":418},"SimpleSink-operator-6b2113be-3bd6-4f27-9068-22f5e9049eb1":{"x":796,"y":340},"PythonUDFV2-operator-cf5f2dd9-e8c1-485c-8e0d-213738c6dba8":{"x":134,"y":416},"PythonUDFV2-operator-5919c5eb-1ad9-45d3-a30e-103f3bf1b908":{"x":272,"y":340},"Aggregate-operator-81dc18e2-bf73-4d9f-b49d-9f4cd9908fe5":{"x":412,"y":340},"PythonUDFV2-operator-19d5fa0d-0ca5-4c4d-9f8c-bf0300944a98":{"x":550,"y":340},"HTMLVisualizer-operator-e9b5face-8225-44bf-83cf-d9c2e337cb27":{"x":690,"y":340},"SimpleSink-operator-ac822658-13b9-4228-8106-6a59694a1cbd":{"x":272,"y":498},"CSVFileScan-operator-49536f2e-e2f5-4483-97af-4e371ef584b9":{"x":-8,"y":732},"SimpleSink-operator-aca6c9dd-a876-4c1d-a780-103cfae5823a":{"x":828,"y":656},"PythonUDFV2-operator-fca88380-822d-4904-992b-8e3dc3035fc6":{"x":126,"y":728},"PythonUDFV2-operator-e6138274-9a84-4361-a276-7d00edd1d27a":{"x":264,"y":652},"Aggregate-operator-189a260b-8768-4e03-936f-9b6de03b85f8":{"x":404,"y":652},"PythonUDFV2-operator-415855a0-ffa4-4748-b6d8-f076d768c1c1":{"x":542,"y":654},"HTMLVisualizer-operator-2fcf9061-b1a1-4ec9-aece-8d6ac6b8ca36":{"x":682,"y":652},"SimpleSink-operator-ab791ca1-68c9-463e-8d25-a5e7b919a289":{"x":264,"y":810},"CSVFileScan-operator-bc863e40-b1c3-4e41-bb9d-334b8d05cdec":{"x":1014,"y":-290},"SimpleSink-operator-37c271ec-8a5b-4dd5-a6f4-54f1db5b5956":{"x":1848,"y":-370},"PythonUDFV2-operator-14ebdb61-a0fb-4848-9c52-0836e8b362ef":{"x":1152,"y":-292},"PythonUDFV2-operator-840a090f-af5a-424b-a9da-fe02ced2e8d9":{"x":1290,"y":-370},"Aggregate-operator-05bb09ad-b31a-4d27-a14a-9cd5f84f022d":{"x":1430,"y":-370},"PythonUDFV2-operator-6758bb15-ab92-44e3-80c8-9dda7f7fcf34":{"x":1568,"y":-370},"HTMLVisualizer-operator-12d94012-6a88-4754-bc48-9fa74f92dec1":{"x":1708,"y":-370},"SimpleSink-operator-f1caf1cf-5741-4117-be09-c834f4dfdcd8":{"x":1294,"y":-214},"CSVFileScan-operator-85c6874d-fe4c-45ef-afe6-42a8de78c1de":{"x":1028,"y":54},"SimpleSink-operator-5e66f183-26c0-4f63-8e1d-d6234918be66":{"x":1836,"y":-20},"PythonUDFV2-operator-3ad4a911-5121-47bf-ae93-17db47e6db66":{"x":1140,"y":58},"PythonUDFV2-operator-ed95d53c-20aa-4483-b8b5-76fc38d5e283":{"x":1280,"y":-20},"Aggregate-operator-d6f9fa3e-1e28-4643-9c98-ccaa507e918b":{"x":1418,"y":-20},"PythonUDFV2-operator-0c2a50dd-6c75-4d5c-a042-67e698d87401":{"x":1556,"y":-20},"HTMLVisualizer-operator-7a9ea06e-52f3-4de3-9545-8cde0e01bc13":{"x":1696,"y":-20},"SimpleSink-operator-0b40d928-4958-4455-874e-b44ee5b9ac40":{"x":1280,"y":138},"CSVFileScan-operator-b045e22f-3dc2-43d6-b7d2-70b343d549ba":{"x":1010,"y":404},"SimpleSink-operator-2fd664a8-3237-4d8c-adbe-0020c04a69d8":{"x":1844,"y":324},"PythonUDFV2-operator-bb4495c0-1541-4a6b-84ae-688b5689c741":{"x":1148,"y":402},"PythonUDFV2-operator-06a1f4cf-cdb0-46f6-9960-d5c973b0a74f":{"x":1286,"y":324},"Aggregate-operator-9c5def48-cc73-4505-8a58-4aa793c4bba7":{"x":1426,"y":324},"PythonUDFV2-operator-5fb51bbb-8df1-46a2-bf50-35175149123d":{"x":1562,"y":324},"HTMLVisualizer-operator-af6badf1-fe0f-45a7-ac43-de1c78366227":{"x":1704,"y":324},"SimpleSink-operator-2c1ad623-e6b6-479b-b96f-5e6b1687515e":{"x":1300,"y":498},"CSVFileScan-operator-c0adbe26-808d-4b1e-a9d8-1194b6ff57e6":{"x":1010,"y":762},"SimpleSink-operator-697407f6-9e22-49fd-a1da-06debf87d93a":{"x":1846,"y":680},"PythonUDFV2-operator-7c9f3438-c2e6-4969-be54-6f7ef7878fc8":{"x":1148,"y":758},"PythonUDFV2-operator-666b4326-9c4e-481f-a808-bb6004e1c70f":{"x":1286,"y":680},"Aggregate-operator-a39bbbae-6930-4786-a182-9e8d0ad08c20":{"x":1428,"y":680},"PythonUDFV2-operator-37032397-8784-43d0-80c5-1cdec00755cd":{"x":1578,"y":684},"HTMLVisualizer-operator-c37a160e-2607-4049-93f1-c7d3ac6c514d":{"x":1704,"y":680},"SimpleSink-operator-c4e92db5-a826-40b2-8d39-cb881581a52f":{"x":1280,"y":846},"CSVFileScan-operator-b723bb50-91d2-4bbd-98c2-d41824b67472":{"x":1012,"y":1082},"SimpleSink-operator-6b2841eb-69ae-4162-b388-996fa5316978":{"x":1846,"y":998},"PythonUDFV2-operator-de55b8a7-3ea6-45ca-8442-8710314362a6":{"x":1152,"y":1078},"PythonUDFV2-operator-9832e068-7502-4a9d-8eef-f78791fee9ab":{"x":1288,"y":1000},"Aggregate-operator-bcd1a24c-da05-441f-9e8e-ef0ce8ac5541":{"x":1428,"y":1000},"PythonUDFV2-operator-42d7f581-c0ce-4eb0-adf7-c18213f97a57":{"x":1564,"y":1000},"HTMLVisualizer-operator-ff22583f-e7a7-4ba6-9812-a0794d6d9fad":{"x":1706,"y":1000},"SimpleSink-operator-b3a42b9d-2ee4-42fb-b6a5-8b87e7284240":{"x":1292,"y":1158},"SimpleSink-operator-e4340b7b-97dd-47a4-92a2-b85c7d08ee23":{"x":492,"y":-154},"SimpleSink-operator-4b483c0c-5cce-44af-8137-c75aa3098430":{"x":478,"y":492},"SimpleSink-operator-7e6c4aeb-3088-4c1c-bd2c-43f1707e419e":{"x":490,"y":816},"SimpleSink-operator-911e0d9b-3e5f-4096-b53b-753e88476ced":{"x":1526,"y":-228},"SimpleSink-operator-92d6c144-ca7b-4070-a45b-fb84a889b8cc":{"x":1538,"y":126},"SimpleSink-operator-40de5080-e7ca-4e0b-9c76-69fc5dc896e1":{"x":1520,"y":486},"SimpleSink-operator-7e656da7-761e-4868-a025-caf941a07c90":{"x":1524,"y":824},"SimpleSink-operator-0dff3731-d037-4cc4-acb8-93d84566e7f7":{"x":1524,"y":1156},"SimpleSink-operator-e10286f5-1e49-4643-ba4a-ab3884763e47":{"x":530,"y":154.02000427246094}},"links":[{"linkID":"d0d199b6-d640-4358-89e0-99f3048eb410","source":{"operatorID":"CSVFileScan-operator-2378e233-aa1c-437c-b7d6-34a90814b119","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-2f6e3d0b-3971-4d34-a266-8e087873fc06","portID":"input-0"}},{"linkID":"93f107b9-f170-410e-95d0-13c37eb61ecf","source":{"operatorID":"PythonUDFV2-operator-2f6e3d0b-3971-4d34-a266-8e087873fc06","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-d43883b8-7cd9-43cf-9885-116c9c687f42","portID":"input-0"}},{"linkID":"baf700f2-b896-4aa6-b31e-d02965444c7b","source":{"operatorID":"PythonUDFV2-operator-d43883b8-7cd9-43cf-9885-116c9c687f42","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-6b4960cd-6fea-4669-b0f8-11299466ce9d","portID":"input-0"}},{"linkID":"e478315a-b488-459e-b615-d529b3c898b0","source":{"operatorID":"Aggregate-operator-6b4960cd-6fea-4669-b0f8-11299466ce9d","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-cf0e504c-8b5a-4a88-b366-c2a21b5a2466","portID":"input-0"}},{"linkID":"f78ecd34-7827-48a3-a1f6-77f4ef67a8ec","source":{"operatorID":"PythonUDFV2-operator-cf0e504c-8b5a-4a88-b366-c2a21b5a2466","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-17400554-a98e-4e7d-bbb0-435b4f1a0a5d","portID":"input-0"}},{"linkID":"cbf300f6-ed00-4974-b70a-6aa518bd26fd","source":{"operatorID":"HTMLVisualizer-operator-17400554-a98e-4e7d-bbb0-435b4f1a0a5d","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-0ff1803b-f383-4039-ba6d-225eefadec49","portID":"input-0"}},{"linkID":"link-b2c6c85a-25ab-4c2e-bc43-d9347fb22c7f","source":{"operatorID":"CSVFileScan-operator-2da47e79-cb8c-4555-ae59-8e0d104d5678","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-d0f1afb4-f8dc-4b48-a0ad-dfbc58458761","portID":"input-0"}},{"linkID":"link-cfbf3056-6a70-4b2f-82e6-1586b689567b","source":{"operatorID":"CSVFileScan-operator-83073f52-5dab-4cd9-bbdd-3e3402f943cf","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-092e460c-4113-4ffa-9a19-bad24a6074a8","portID":"input-0"}},{"linkID":"link-b0a7c044-eb8e-475a-b32c-74b995d96fce","source":{"operatorID":"PythonUDFV2-operator-092e460c-4113-4ffa-9a19-bad24a6074a8","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-1c53b1e4-5790-48dd-9840-5d6865bc5b84","portID":"input-0"}},{"linkID":"6565ddf2-a95a-4610-8759-d702f4751a98","source":{"operatorID":"PythonUDFV2-operator-2f6e3d0b-3971-4d34-a266-8e087873fc06","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-e22bc199-92b0-415a-8576-34f9ea5314b2","portID":"input-0"}},{"linkID":"link-6b3999e9-024d-42ba-a437-1eebdd82d1d9","source":{"operatorID":"CSVFileScan-operator-cc09d5a9-7165-42ab-a4cb-7b137abde53e","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-b7149a2b-54f9-4180-a8ef-e7647a8202c7","portID":"input-0"}},{"linkID":"link-56add82e-0b83-4843-95d3-ae5db49da752","source":{"operatorID":"PythonUDFV2-operator-b7149a2b-54f9-4180-a8ef-e7647a8202c7","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-bad59eab-34a4-4522-ae50-fd5c8240c470","portID":"input-0"}},{"linkID":"link-1d09c0be-7a84-4933-8e7f-79e5e9ec57b5","source":{"operatorID":"PythonUDFV2-operator-bad59eab-34a4-4522-ae50-fd5c8240c470","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-c7f1280c-2b11-4b09-8a63-6f03cdfa70d1","portID":"input-0"}},{"linkID":"link-032418d6-0728-4d33-939f-6eab61e5eab6","source":{"operatorID":"Aggregate-operator-c7f1280c-2b11-4b09-8a63-6f03cdfa70d1","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-b7790a5e-86fe-4c51-9460-501ebdf9094c","portID":"input-0"}},{"linkID":"link-23225969-2166-48bd-ae23-680268eb9362","source":{"operatorID":"PythonUDFV2-operator-b7790a5e-86fe-4c51-9460-501ebdf9094c","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-00c135c5-3704-4e16-903e-b0c9526a473a","portID":"input-0"}},{"linkID":"link-5639d126-058c-4ab2-91fd-637d5ec43836","source":{"operatorID":"HTMLVisualizer-operator-00c135c5-3704-4e16-903e-b0c9526a473a","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-2e7eb242-42a8-4881-bd40-aa394cdaf7c6","portID":"input-0"}},{"linkID":"link-8836d4dd-9bac-4786-9d6c-75d2bc301fb1","source":{"operatorID":"PythonUDFV2-operator-b7149a2b-54f9-4180-a8ef-e7647a8202c7","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-1cfe1b3c-5d1b-44eb-b093-043af489400d","portID":"input-0"}},{"linkID":"link-18e21f6f-85f7-4021-a85a-80909797353e","source":{"operatorID":"CSVFileScan-operator-5b408cc3-bc34-4a3f-99a1-6ccfde0d2d8c","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-cf5f2dd9-e8c1-485c-8e0d-213738c6dba8","portID":"input-0"}},{"linkID":"link-335aa488-c0f2-46b5-ad8d-16931c65d10e","source":{"operatorID":"PythonUDFV2-operator-cf5f2dd9-e8c1-485c-8e0d-213738c6dba8","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-5919c5eb-1ad9-45d3-a30e-103f3bf1b908","portID":"input-0"}},{"linkID":"link-9fa08139-8fff-4593-9bb7-436de51732ce","source":{"operatorID":"PythonUDFV2-operator-5919c5eb-1ad9-45d3-a30e-103f3bf1b908","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-81dc18e2-bf73-4d9f-b49d-9f4cd9908fe5","portID":"input-0"}},{"linkID":"link-dd9b8df0-2ec7-419b-9ba9-4ae67d037f2e","source":{"operatorID":"Aggregate-operator-81dc18e2-bf73-4d9f-b49d-9f4cd9908fe5","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-19d5fa0d-0ca5-4c4d-9f8c-bf0300944a98","portID":"input-0"}},{"linkID":"link-0a2b4258-bd46-4895-ab1c-9cce93dc2e48","source":{"operatorID":"PythonUDFV2-operator-19d5fa0d-0ca5-4c4d-9f8c-bf0300944a98","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-e9b5face-8225-44bf-83cf-d9c2e337cb27","portID":"input-0"}},{"linkID":"link-eb37a8a4-a901-437f-8960-6eaa030d073b","source":{"operatorID":"HTMLVisualizer-operator-e9b5face-8225-44bf-83cf-d9c2e337cb27","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-6b2113be-3bd6-4f27-9068-22f5e9049eb1","portID":"input-0"}},{"linkID":"link-ed647cc7-adbb-4720-a409-f69262e08225","source":{"operatorID":"PythonUDFV2-operator-cf5f2dd9-e8c1-485c-8e0d-213738c6dba8","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-ac822658-13b9-4228-8106-6a59694a1cbd","portID":"input-0"}},{"linkID":"link-2f488062-d354-4e51-b469-2404597ed1f2","source":{"operatorID":"CSVFileScan-operator-49536f2e-e2f5-4483-97af-4e371ef584b9","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-fca88380-822d-4904-992b-8e3dc3035fc6","portID":"input-0"}},{"linkID":"link-1bea0c59-1774-4263-a9ed-89f3d44447d0","source":{"operatorID":"PythonUDFV2-operator-fca88380-822d-4904-992b-8e3dc3035fc6","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-e6138274-9a84-4361-a276-7d00edd1d27a","portID":"input-0"}},{"linkID":"link-669f6ef7-bf8e-4f57-a12b-db8e72b8fffd","source":{"operatorID":"PythonUDFV2-operator-e6138274-9a84-4361-a276-7d00edd1d27a","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-189a260b-8768-4e03-936f-9b6de03b85f8","portID":"input-0"}},{"linkID":"link-ac2c4c8f-3cbd-4a41-b099-3802b1e1f898","source":{"operatorID":"Aggregate-operator-189a260b-8768-4e03-936f-9b6de03b85f8","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-415855a0-ffa4-4748-b6d8-f076d768c1c1","portID":"input-0"}},{"linkID":"link-26f83980-c0c1-4bda-b1b7-49423c747c19","source":{"operatorID":"PythonUDFV2-operator-415855a0-ffa4-4748-b6d8-f076d768c1c1","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-2fcf9061-b1a1-4ec9-aece-8d6ac6b8ca36","portID":"input-0"}},{"linkID":"link-d6abcb2d-6311-4b90-b61b-9a6e7432fb30","source":{"operatorID":"HTMLVisualizer-operator-2fcf9061-b1a1-4ec9-aece-8d6ac6b8ca36","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-aca6c9dd-a876-4c1d-a780-103cfae5823a","portID":"input-0"}},{"linkID":"link-6e0074b4-34ce-472a-99d2-5a052b6b7d57","source":{"operatorID":"PythonUDFV2-operator-fca88380-822d-4904-992b-8e3dc3035fc6","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-ab791ca1-68c9-463e-8d25-a5e7b919a289","portID":"input-0"}},{"linkID":"link-a33a7daf-4634-4c76-ae9a-bf718f8540f7","source":{"operatorID":"CSVFileScan-operator-bc863e40-b1c3-4e41-bb9d-334b8d05cdec","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-14ebdb61-a0fb-4848-9c52-0836e8b362ef","portID":"input-0"}},{"linkID":"link-9a040a30-81a3-4607-8b81-d46abe00acc0","source":{"operatorID":"PythonUDFV2-operator-14ebdb61-a0fb-4848-9c52-0836e8b362ef","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-840a090f-af5a-424b-a9da-fe02ced2e8d9","portID":"input-0"}},{"linkID":"link-c270f398-026b-4c58-84f9-145caf542a39","source":{"operatorID":"PythonUDFV2-operator-840a090f-af5a-424b-a9da-fe02ced2e8d9","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-05bb09ad-b31a-4d27-a14a-9cd5f84f022d","portID":"input-0"}},{"linkID":"link-a2be3998-75c1-4197-bf31-7eac96fece13","source":{"operatorID":"Aggregate-operator-05bb09ad-b31a-4d27-a14a-9cd5f84f022d","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-6758bb15-ab92-44e3-80c8-9dda7f7fcf34","portID":"input-0"}},{"linkID":"link-c3ba52e2-317f-4a73-bfb1-27d89ed9d235","source":{"operatorID":"PythonUDFV2-operator-6758bb15-ab92-44e3-80c8-9dda7f7fcf34","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-12d94012-6a88-4754-bc48-9fa74f92dec1","portID":"input-0"}},{"linkID":"link-9925033c-49c2-45cd-a974-ea4b60865cdc","source":{"operatorID":"HTMLVisualizer-operator-12d94012-6a88-4754-bc48-9fa74f92dec1","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-37c271ec-8a5b-4dd5-a6f4-54f1db5b5956","portID":"input-0"}},{"linkID":"link-078101a8-868e-421e-83e2-a4a194eea11f","source":{"operatorID":"PythonUDFV2-operator-14ebdb61-a0fb-4848-9c52-0836e8b362ef","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-f1caf1cf-5741-4117-be09-c834f4dfdcd8","portID":"input-0"}},{"linkID":"link-075ba50c-98d2-444e-b92a-cb7696715cf6","source":{"operatorID":"CSVFileScan-operator-85c6874d-fe4c-45ef-afe6-42a8de78c1de","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-3ad4a911-5121-47bf-ae93-17db47e6db66","portID":"input-0"}},{"linkID":"link-5bd758c9-ede3-4ac6-b588-5e0a4e6cbe8c","source":{"operatorID":"PythonUDFV2-operator-3ad4a911-5121-47bf-ae93-17db47e6db66","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-ed95d53c-20aa-4483-b8b5-76fc38d5e283","portID":"input-0"}},{"linkID":"link-b205b80c-00c4-480b-975e-a9164ceccf02","source":{"operatorID":"PythonUDFV2-operator-ed95d53c-20aa-4483-b8b5-76fc38d5e283","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-d6f9fa3e-1e28-4643-9c98-ccaa507e918b","portID":"input-0"}},{"linkID":"link-56720f42-ed2b-4002-9c29-e6d9a5304b53","source":{"operatorID":"Aggregate-operator-d6f9fa3e-1e28-4643-9c98-ccaa507e918b","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-0c2a50dd-6c75-4d5c-a042-67e698d87401","portID":"input-0"}},{"linkID":"link-49b408c0-1065-4e2c-b982-8c6d16c1c1ee","source":{"operatorID":"PythonUDFV2-operator-0c2a50dd-6c75-4d5c-a042-67e698d87401","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-7a9ea06e-52f3-4de3-9545-8cde0e01bc13","portID":"input-0"}},{"linkID":"link-ad159410-bee1-44a5-a1ac-8df9fe6a54bd","source":{"operatorID":"HTMLVisualizer-operator-7a9ea06e-52f3-4de3-9545-8cde0e01bc13","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-5e66f183-26c0-4f63-8e1d-d6234918be66","portID":"input-0"}},{"linkID":"link-4c6ca95c-7ef5-4b8e-84b1-cf6c6afeaccf","source":{"operatorID":"PythonUDFV2-operator-3ad4a911-5121-47bf-ae93-17db47e6db66","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-0b40d928-4958-4455-874e-b44ee5b9ac40","portID":"input-0"}},{"linkID":"link-a705d8d7-ff0d-43d6-b62d-efc6c0da93da","source":{"operatorID":"CSVFileScan-operator-b045e22f-3dc2-43d6-b7d2-70b343d549ba","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-bb4495c0-1541-4a6b-84ae-688b5689c741","portID":"input-0"}},{"linkID":"link-dace9c44-11c1-4f60-a4c9-360b91759bcc","source":{"operatorID":"PythonUDFV2-operator-bb4495c0-1541-4a6b-84ae-688b5689c741","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-06a1f4cf-cdb0-46f6-9960-d5c973b0a74f","portID":"input-0"}},{"linkID":"link-5ebcadf2-4d8e-4a24-9b71-a34673555ab5","source":{"operatorID":"PythonUDFV2-operator-06a1f4cf-cdb0-46f6-9960-d5c973b0a74f","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-9c5def48-cc73-4505-8a58-4aa793c4bba7","portID":"input-0"}},{"linkID":"link-5898248d-9047-4fca-a160-57e5080a171b","source":{"operatorID":"Aggregate-operator-9c5def48-cc73-4505-8a58-4aa793c4bba7","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-5fb51bbb-8df1-46a2-bf50-35175149123d","portID":"input-0"}},{"linkID":"link-7eda4d12-b731-4283-99b3-20dec93b8c0e","source":{"operatorID":"PythonUDFV2-operator-5fb51bbb-8df1-46a2-bf50-35175149123d","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-af6badf1-fe0f-45a7-ac43-de1c78366227","portID":"input-0"}},{"linkID":"link-a2a51515-fb6b-4a71-a6a4-618c920c00d3","source":{"operatorID":"HTMLVisualizer-operator-af6badf1-fe0f-45a7-ac43-de1c78366227","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-2fd664a8-3237-4d8c-adbe-0020c04a69d8","portID":"input-0"}},{"linkID":"link-a48c9ec7-0975-4e05-b6cd-b48ca164b1f2","source":{"operatorID":"PythonUDFV2-operator-bb4495c0-1541-4a6b-84ae-688b5689c741","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-2c1ad623-e6b6-479b-b96f-5e6b1687515e","portID":"input-0"}},{"linkID":"link-1a250b83-a22f-4073-ae85-9d53b931eea0","source":{"operatorID":"CSVFileScan-operator-c0adbe26-808d-4b1e-a9d8-1194b6ff57e6","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-7c9f3438-c2e6-4969-be54-6f7ef7878fc8","portID":"input-0"}},{"linkID":"link-2bb829f4-f585-4bb9-b009-a9474f4c1f09","source":{"operatorID":"PythonUDFV2-operator-7c9f3438-c2e6-4969-be54-6f7ef7878fc8","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-666b4326-9c4e-481f-a808-bb6004e1c70f","portID":"input-0"}},{"linkID":"link-82b5c131-8e46-4c09-84be-75caf57931b2","source":{"operatorID":"PythonUDFV2-operator-666b4326-9c4e-481f-a808-bb6004e1c70f","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-a39bbbae-6930-4786-a182-9e8d0ad08c20","portID":"input-0"}},{"linkID":"link-be3966f9-75d9-4953-b780-560a5b408440","source":{"operatorID":"Aggregate-operator-a39bbbae-6930-4786-a182-9e8d0ad08c20","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-37032397-8784-43d0-80c5-1cdec00755cd","portID":"input-0"}},{"linkID":"link-3bdf4c40-f6f5-4a54-a7f7-c95fa638da60","source":{"operatorID":"PythonUDFV2-operator-37032397-8784-43d0-80c5-1cdec00755cd","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-c37a160e-2607-4049-93f1-c7d3ac6c514d","portID":"input-0"}},{"linkID":"link-e633a142-78c9-414f-8bf6-9f190cfca94b","source":{"operatorID":"HTMLVisualizer-operator-c37a160e-2607-4049-93f1-c7d3ac6c514d","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-697407f6-9e22-49fd-a1da-06debf87d93a","portID":"input-0"}},{"linkID":"link-570bf9c9-4c5a-4f66-a960-bec7f9578de6","source":{"operatorID":"PythonUDFV2-operator-7c9f3438-c2e6-4969-be54-6f7ef7878fc8","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-c4e92db5-a826-40b2-8d39-cb881581a52f","portID":"input-0"}},{"linkID":"link-01e74b8a-0200-47fb-a918-09159486df60","source":{"operatorID":"CSVFileScan-operator-b723bb50-91d2-4bbd-98c2-d41824b67472","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-de55b8a7-3ea6-45ca-8442-8710314362a6","portID":"input-0"}},{"linkID":"link-ceaaa2f0-a28e-4b2e-8a66-fd0b5e6933be","source":{"operatorID":"PythonUDFV2-operator-de55b8a7-3ea6-45ca-8442-8710314362a6","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-9832e068-7502-4a9d-8eef-f78791fee9ab","portID":"input-0"}},{"linkID":"link-875ad7a2-fbcc-40ea-9a1c-25c9e9f2f301","source":{"operatorID":"PythonUDFV2-operator-9832e068-7502-4a9d-8eef-f78791fee9ab","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-bcd1a24c-da05-441f-9e8e-ef0ce8ac5541","portID":"input-0"}},{"linkID":"link-6c572df3-eb9a-49ae-bab6-0e28c5650639","source":{"operatorID":"Aggregate-operator-bcd1a24c-da05-441f-9e8e-ef0ce8ac5541","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-42d7f581-c0ce-4eb0-adf7-c18213f97a57","portID":"input-0"}},{"linkID":"link-71eaff67-dcc4-4505-9d11-877f14165a16","source":{"operatorID":"PythonUDFV2-operator-42d7f581-c0ce-4eb0-adf7-c18213f97a57","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-ff22583f-e7a7-4ba6-9812-a0794d6d9fad","portID":"input-0"}},{"linkID":"link-fec72743-c752-4878-9185-96b7df8255f6","source":{"operatorID":"HTMLVisualizer-operator-ff22583f-e7a7-4ba6-9812-a0794d6d9fad","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-6b2841eb-69ae-4162-b388-996fa5316978","portID":"input-0"}},{"linkID":"link-086a0192-d8ed-43e2-b85c-2055aae19c6c","source":{"operatorID":"PythonUDFV2-operator-de55b8a7-3ea6-45ca-8442-8710314362a6","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-b3a42b9d-2ee4-42fb-b6a5-8b87e7284240","portID":"input-0"}},{"linkID":"4f96f623-665a-4e58-a3e6-0f573f26b78c","source":{"operatorID":"Aggregate-operator-c7f1280c-2b11-4b09-8a63-6f03cdfa70d1","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-e4340b7b-97dd-47a4-92a2-b85c7d08ee23","portID":"input-0"}},{"linkID":"c1d47933-1806-4823-b36c-8eb5e3a4b173","source":{"operatorID":"Aggregate-operator-81dc18e2-bf73-4d9f-b49d-9f4cd9908fe5","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-4b483c0c-5cce-44af-8137-c75aa3098430","portID":"input-0"}},{"linkID":"1d40f95c-adc9-48c2-91ca-8aace5638c45","source":{"operatorID":"Aggregate-operator-05bb09ad-b31a-4d27-a14a-9cd5f84f022d","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-911e0d9b-3e5f-4096-b53b-753e88476ced","portID":"input-0"}},{"linkID":"122b1a2a-8db2-4ff9-98b7-491ddb35fb4f","source":{"operatorID":"Aggregate-operator-d6f9fa3e-1e28-4643-9c98-ccaa507e918b","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-92d6c144-ca7b-4070-a45b-fb84a889b8cc","portID":"input-0"}},{"linkID":"42289a7e-e838-4a3d-9fb7-f5f626ee8eb3","source":{"operatorID":"Aggregate-operator-9c5def48-cc73-4505-8a58-4aa793c4bba7","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-40de5080-e7ca-4e0b-9c76-69fc5dc896e1","portID":"input-0"}},{"linkID":"bb0d9a36-ad80-4ac8-b6d5-135cb417d35c","source":{"operatorID":"Aggregate-operator-a39bbbae-6930-4786-a182-9e8d0ad08c20","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-7e656da7-761e-4868-a025-caf941a07c90","portID":"input-0"}},{"linkID":"6eb406ab-273c-41e3-b157-c1f46a423799","source":{"operatorID":"Aggregate-operator-bcd1a24c-da05-441f-9e8e-ef0ce8ac5541","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-0dff3731-d037-4cc4-acb8-93d84566e7f7","portID":"input-0"}},{"linkID":"fb871227-f12b-4284-96fd-1c5d0c87d9a2","source":{"operatorID":"Aggregate-operator-189a260b-8768-4e03-936f-9b6de03b85f8","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-7e6c4aeb-3088-4c1c-bd2c-43f1707e419e","portID":"input-0"}},{"linkID":"33c8313e-630a-4dc7-917b-2fa27490f12c","source":{"operatorID":"Aggregate-operator-6b4960cd-6fea-4669-b0f8-11299466ce9d","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-e10286f5-1e49-4643-ba4a-ab3884763e47","portID":"input-0"}}],"groups":[],"breakpoints":{},"commentBoxes":[{"commentBoxID":"commentBox-85e9eb5c-2c85-4a78-9db1-7a115d594381","comments":[{"content":"UCI","creatorName":"Justin Albert Fortino","creatorID":42,"creationTime":"2023-05-03T23:43:00.453Z"}],"commentBoxPosition":{"x":502,"y":18}},{"commentBoxID":"commentBox-9b6d3efd-a259-4118-aaa4-49b883f9ee7c","comments":[{"content":"MERCED","creatorName":"Justin Albert Fortino","creatorID":42,"creationTime":"2023-05-03T23:43:51.757Z"}],"commentBoxPosition":{"x":500,"y":20}},{"commentBoxID":"commentBox-1f89a852-5ef3-48d0-a0c6-5d34bf097860","comments":[{"content":"UCR","creatorName":"Justin Albert Fortino","creatorID":42,"creationTime":"2023-05-03T23:46:23.961Z"}],"commentBoxPosition":{"x":500,"y":20}},{"commentBoxID":"commentBox-5eb8e1e6-338b-48d1-9b4e-73516c16ccb2","comments":[{"content":"UCSC","creatorName":"Justin Albert Fortino","creatorID":42,"creationTime":"2023-05-03T23:47:33.026Z"}],"commentBoxPosition":{"x":500,"y":20}},{"commentBoxID":"commentBox-642506df-7ac8-4f21-97f4-a728db3fbad7","comments":[{"content":"UCSB","creatorName":"Justin Albert Fortino","creatorID":42,"creationTime":"2023-05-03T23:48:23.843Z"}],"commentBoxPosition":{"x":500,"y":20}},{"commentBoxID":"commentBox-a8c2011a-4683-4611-8b7b-3737898245ee","comments":[{"content":"DAVIS","creatorName":"Justin Albert Fortino","creatorID":42,"creationTime":"2023-05-03T23:48:57.703Z"}],"commentBoxPosition":{"x":500,"y":20}},{"commentBoxID":"commentBox-b9b9254b-1b70-49d1-9686-14c41aa2a285","comments":[{"content":"UCSD","creatorName":"Justin Albert Fortino","creatorID":42,"creationTime":"2023-05-03T23:49:27.229Z"}],"commentBoxPosition":{"x":500,"y":20}},{"commentBoxID":"commentBox-3bb15c02-eb70-437b-abe8-0ee34a396949","comments":[{"content":"BERKELEY","creatorName":"Justin Albert Fortino","creatorID":42,"creationTime":"2023-05-03T23:50:08.652Z"}],"commentBoxPosition":{"x":500,"y":20}},{"commentBoxID":"commentBox-a677835f-5df6-46b8-982d-83106abd4425","comments":[{"content":"UCLA","creatorName":"Justin Albert Fortino","creatorID":42,"creationTime":"2023-05-03T23:50:37.340Z"}],"commentBoxPosition":{"x":500,"y":20}}]}