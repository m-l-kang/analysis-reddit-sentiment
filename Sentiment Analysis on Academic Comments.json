{"operators":[{"operatorID":"CSVFileScan-operator-cc09d5a9-7165-42ab-a4cb-7b137abde53e","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"fortinoj@uci.edu/UCMAcademicComments.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-2e7eb242-42a8-4881-bd40-aa394cdaf7c6","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-bad59eab-34a4-4522-ae50-fd5c8240c470","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"date\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-c7f1280c-2b11-4b09-8a63-6f03cdfa70d1","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-b7790a5e-86fe-4c51-9460-501ebdf9094c","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of Academic r/ucmerced Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        plt.ylim(-1, 1)\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-00c135c5-3704-4e16-903e-b0c9526a473a","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-e4340b7b-97dd-47a4-92a2-b85c7d08ee23","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-c46bdbf8-7e54-4751-8d6c-721332810acd","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"fortinoj@uci.edu/UCBAcademicComments.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-27214745-ca49-4b82-8cc6-516d28011ba9","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-a1693e51-1135-46d7-84c8-0df4e6436484","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"date\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-6e0a4390-28a9-473a-b4b8-b885b55d5997","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-b415adc7-b2d1-4fa4-81d9-2aca638e3508","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of Academic r/berkeley Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        plt.ylim(-1, 1)\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-93bd4861-7f8d-4df5-a451-9d16e0c433ca","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-2ca95882-1ec5-4ebc-8e21-7b5f71de95e6","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-dc409a84-5350-4ee2-b40b-73d5e66ecc63","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"fortinoj@uci.edu/UCDAcademicComments.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-898784dc-d389-46a1-8c88-dccf3ade1891","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-c17b6cab-2203-4d0e-88bf-427bf88cf401","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"date\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-6f9d9394-ebb0-44fe-ae5a-4d4eb43341c0","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-fa415a9f-fc95-40ed-8730-79592178110b","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of Academic r/UCDavis Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        plt.ylim(-1, 1)\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-0e1f859a-b39b-493c-bbeb-9670b13f6772","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-13b690f9-4045-4ae0-a249-e5740bf39ad9","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-f730ee0e-5c9d-40af-9b24-0bd15596a684","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"fortinoj@uci.edu/UCIAcademicComments.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-bbdb47e8-c6a5-4d92-9108-cb30f7b8e121","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-4680c3fa-db90-4129-aee3-b2ba0879a86e","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"date\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-a52581d0-a74f-4cfa-9fea-f6dc354c9e0a","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-5ac88245-207c-4952-84fc-192b2896574b","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of Academic r/UCI Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        plt.ylim(-1, 1)\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-be5d2d5d-1358-4223-bd0a-3e1a91b48633","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-da5e1f56-5d6f-4647-9f51-8090f6a1e702","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-16606aad-b074-4c55-a871-732a22ecb182","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"fortinoj@uci.edu/UCLAAcademicComments.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-0c5a2762-0448-490e-b49a-545d94fee59a","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-dea69ff2-8ed6-4920-8bef-e72def2df287","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"date\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-105a9f25-8334-4e15-a4a8-89bb98109af3","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-b9176476-d398-4a05-a095-7b20cbf6e928","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of Academic r/ucla Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        plt.ylim(-1, 1)\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-a3466f92-b6ff-4576-a409-1513f24913ca","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-8f0c6612-2537-424d-a74d-ab4b18631599","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-5165580c-82dd-4f8a-98b7-72180e741945","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"fortinoj@uci.edu/UCRAcademicComments.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-4d939477-a161-4c6a-8e87-c0c2aa15860f","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-3a4482af-fea4-4871-a16d-edd0daecf42a","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"date\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-45bcedeb-d655-4a8a-90b9-a070f222fc2c","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-ed722c36-cee1-4b9d-bbb0-0f2ada4ed499","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/ucmerced Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of Academic r/UCR Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        plt.ylim(-1, 1)\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-0da06ab4-74e2-4173-9c74-8b180cd28ef3","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-7c269aaa-dec2-479a-88aa-a56943abfb7e","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-6345be4d-777a-4af1-95c7-fc65d8909e38","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"fortinoj@uci.edu/UCSBAcademicComments.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-344d67dc-b5a7-4a71-b007-29475f223ec5","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-912e87e9-918e-4f21-9c09-4c279434b6e7","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"date\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-85a42d42-fc56-4115-a8b1-da3efbb058ad","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-524b8fd1-7a1a-4cea-a44d-82a820a2394c","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/UCSantaBarbara Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of Academic r/UCSantaBarbara Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        plt.ylim(-1, 1)\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-3eee53c2-e0ad-4330-be78-007a049eb3f2","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-89fc86e0-8c81-4d81-9a14-db7e0ee0a484","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-e50060f5-672e-464c-93ba-ad22428f2632","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"fortinoj@uci.edu/UCSCAcademicComments.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-6117e893-cdab-429a-85ac-4579a82c7285","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-3349541d-180b-4306-9317-1eda68793e89","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"date\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-73bf257e-cc19-47a6-88bd-d5dc65e7bf73","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-736a9f89-3fcc-4b20-8519-be215f081c15","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/UCSantaBarbara Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of Academic r/UCSC Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        plt.ylim(-1, 1)\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-8cb95961-c82d-4751-939c-5a98021269c5","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-8f10d1fe-5857-4fb9-b4b9-538b2517bc5c","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"CSVFileScan-operator-6140f838-966a-4979-a981-79a4c73adbc4","operatorType":"CSVFileScan","operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","operatorProperties":{"customDelimiter":",","hasHeader":true,"fileName":"fortinoj@uci.edu/UCSDAcademicComments.csv","offset":null,"limit":500000},"inputPorts":[],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"CSV File Scan","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"SimpleSink-operator-980d2b9e-b374-49ae-9855-d8f04552a589","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-4f67161f-1365-4b76-9ab0-d8438e4cbeef","operatorType":"PythonUDFV2","operatorProperties":{"code":"from typing import Iterator, Union\n\nfrom typing import Optional\nfrom overrides import overrides\nfrom pytexera import InputExhausted, Tuple, TupleLike, UDFOperatorV2, overrides\n\n\nclass SentimentProcessor(UDFOperatorV2):\n\n    @overrides\n    def process_tuple(self, tuple_: Union[Tuple, InputExhausted], port: int) -> Iterator[Optional[TupleLike]]:\n        if isinstance(tuple_, Tuple):\n            split_res = str(tuple_[\"date\"]).split(\"-\")\n            tuple_[\"month\"] = split_res[0] + \"-\" + split_res[1]\n            yield tuple_","retainInputColumns":true,"outputColumns":[{"attributeName":"month","attributeType":"string"}],"workers":2},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Get month","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"Aggregate-operator-d2f83f7f-2d51-40a0-b44d-57d112998869","operatorType":"Aggregate","operatorVersion":"678f1e94fc3d8318872f76daea5c18c7dc837c62","operatorProperties":{"aggregations":[{"result attribute":"monthly_sentiment","aggFunction":"average","attribute":"sentiment_score"}],"groupByKeys":["month"]},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[{"portID":"output-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"showAdvanced":false,"isDisabled":false,"customDisplayName":"Aggregate","dynamicInputPorts":false,"dynamicOutputPorts":false},{"operatorID":"PythonUDFV2-operator-cd4a6a3e-58d0-48a4-8289-268d67488119","operatorType":"PythonUDFV2","operatorProperties":{"code":"# Choose from the following templates:\n# \nfrom typing import Iterator, Optional, Union\nfrom pytexera import *\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.io import to_html\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport mpld3\n\n\"\"\"\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n        \n        chart = go.Figure()\n        chart.add_trace(go.Scatter(x=table['month'], y=table['monthly_sentiment'],\n                    mode='lines',\n                    name='Monthly trend')).update_layout(xaxis_title=\"Time\", yaxis_title=\"Average Monthly Sentiment Score\", \n                    title=dict(text = 'Average Monthly Sentiment Score of r/UCSantaBarbara Comments Over Time')) \n        yield Table(pandas.DataFrame({'output':[to_html(chart)]})) \"\"\"\n\nclass ProcessTableOperator(UDFTableOperator):\n    @overrides\n    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:\n        table = table.sort_values(by=['month'])\n\n        chart = plt.figure()\n\n        table['month'] = pd.to_datetime(table['month'], format='%Y-%m')\n        # Fit a lowess regression model\n        lowess = sm.nonparametric.lowess(table['monthly_sentiment'], table['month'].astype('int64'))\n\n        # Plot the scatterplot and lowess regression line\n        plt.scatter(table['month'], table['monthly_sentiment'])\n        plt.plot(pd.to_datetime(lowess[:, 0]), lowess[:, 1], color='red')\n        plt.title('Average Monthly Sentiment Score of Academic r/UCSD Comments Over Time')\n        plt.xlabel('Time')\n        plt.ylabel('Average Monthly Sentiment Score')\n        plt.ylim(-1, 1)\n        html_code = mpld3.fig_to_html(chart)\n        yield Table(pd.DataFrame({'output':[html_code]}))","outputColumns":[{"attributeName":"output","attributeType":"ANY"}],"workers":1,"retainInputColumns":false},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"Visualization Scatter","isDisabled":false,"operatorVersion":"66e3337b34500e4e5e030e32cde1e3f4b614f005","isCached":false},{"operatorID":"HTMLVisualizer-operator-5d35d815-b8d4-4b25-974e-869cff4b1b67","operatorType":"HTMLVisualizer","operatorProperties":{"htmlContentAttrName":"output"},"inputPorts":[{"portID":"input-0","displayName":""}],"outputPorts":[{"portID":"output-0","displayName":""}],"customDisplayName":"HTML visualizer","isDisabled":false,"operatorVersion":"bad5e298e4ec534ac7d33de641f15df6cab9de82","isCached":false},{"operatorID":"SimpleSink-operator-cf5c1dfb-0cd8-4cea-afe8-e1fbaf286fed","operatorType":"SimpleSink","operatorVersion":"1aeac5b4d20dd8bda816a16a1485c12b82013d0d","operatorProperties":{},"inputPorts":[{"portID":"input-0","displayName":"","allowMultiInputs":false,"isDynamicPort":false}],"outputPorts":[],"showAdvanced":false,"isDisabled":false,"customDisplayName":"View Results","dynamicInputPorts":false,"dynamicOutputPorts":false}],"operatorPositions":{"CSVFileScan-operator-cc09d5a9-7165-42ab-a4cb-7b137abde53e":{"x":32,"y":-306},"SimpleSink-operator-2e7eb242-42a8-4881-bd40-aa394cdaf7c6":{"x":832,"y":-310},"PythonUDFV2-operator-bad59eab-34a4-4522-ae50-fd5c8240c470":{"x":276,"y":-312},"Aggregate-operator-c7f1280c-2b11-4b09-8a63-6f03cdfa70d1":{"x":416,"y":-312},"PythonUDFV2-operator-b7790a5e-86fe-4c51-9460-501ebdf9094c":{"x":556,"y":-310},"HTMLVisualizer-operator-00c135c5-3704-4e16-903e-b0c9526a473a":{"x":694,"y":-310},"SimpleSink-operator-e4340b7b-97dd-47a4-92a2-b85c7d08ee23":{"x":492,"y":-154},"CSVFileScan-operator-c46bdbf8-7e54-4751-8d6c-721332810acd":{"x":32,"y":-4},"SimpleSink-operator-27214745-ca49-4b82-8cc6-516d28011ba9":{"x":832,"y":-8},"PythonUDFV2-operator-a1693e51-1135-46d7-84c8-0df4e6436484":{"x":276,"y":-10},"Aggregate-operator-6e0a4390-28a9-473a-b4b8-b885b55d5997":{"x":416,"y":-10},"PythonUDFV2-operator-b415adc7-b2d1-4fa4-81d9-2aca638e3508":{"x":556,"y":-8},"HTMLVisualizer-operator-93bd4861-7f8d-4df5-a451-9d16e0c433ca":{"x":694,"y":-8},"SimpleSink-operator-2ca95882-1ec5-4ebc-8e21-7b5f71de95e6":{"x":492,"y":148},"CSVFileScan-operator-dc409a84-5350-4ee2-b40b-73d5e66ecc63":{"x":24,"y":334},"SimpleSink-operator-898784dc-d389-46a1-8c88-dccf3ade1891":{"x":824,"y":330},"PythonUDFV2-operator-c17b6cab-2203-4d0e-88bf-427bf88cf401":{"x":268,"y":328},"Aggregate-operator-6f9d9394-ebb0-44fe-ae5a-4d4eb43341c0":{"x":408,"y":328},"PythonUDFV2-operator-fa415a9f-fc95-40ed-8730-79592178110b":{"x":548,"y":330},"HTMLVisualizer-operator-0e1f859a-b39b-493c-bbeb-9670b13f6772":{"x":686,"y":330},"SimpleSink-operator-13b690f9-4045-4ae0-a249-e5740bf39ad9":{"x":484,"y":486},"CSVFileScan-operator-f730ee0e-5c9d-40af-9b24-0bd15596a684":{"x":0,"y":632},"SimpleSink-operator-bbdb47e8-c6a5-4d92-9108-cb30f7b8e121":{"x":800,"y":628},"PythonUDFV2-operator-4680c3fa-db90-4129-aee3-b2ba0879a86e":{"x":244,"y":626},"Aggregate-operator-a52581d0-a74f-4cfa-9fea-f6dc354c9e0a":{"x":384,"y":626},"PythonUDFV2-operator-5ac88245-207c-4952-84fc-192b2896574b":{"x":532,"y":624},"HTMLVisualizer-operator-be5d2d5d-1358-4223-bd0a-3e1a91b48633":{"x":662,"y":628},"SimpleSink-operator-da5e1f56-5d6f-4647-9f51-8090f6a1e702":{"x":460,"y":784},"CSVFileScan-operator-16606aad-b074-4c55-a871-732a22ecb182":{"x":996,"y":-310},"SimpleSink-operator-0c5a2762-0448-490e-b49a-545d94fee59a":{"x":1796,"y":-314},"PythonUDFV2-operator-dea69ff2-8ed6-4920-8bef-e72def2df287":{"x":1240,"y":-316},"Aggregate-operator-105a9f25-8334-4e15-a4a8-89bb98109af3":{"x":1380,"y":-316},"PythonUDFV2-operator-b9176476-d398-4a05-a095-7b20cbf6e928":{"x":1520,"y":-314},"HTMLVisualizer-operator-a3466f92-b6ff-4576-a409-1513f24913ca":{"x":1658,"y":-314},"SimpleSink-operator-8f0c6612-2537-424d-a74d-ab4b18631599":{"x":1456,"y":-158},"CSVFileScan-operator-5165580c-82dd-4f8a-98b7-72180e741945":{"x":990,"y":0},"SimpleSink-operator-4d939477-a161-4c6a-8e87-c0c2aa15860f":{"x":1790,"y":-4},"PythonUDFV2-operator-3a4482af-fea4-4871-a16d-edd0daecf42a":{"x":1234,"y":-6},"Aggregate-operator-45bcedeb-d655-4a8a-90b9-a070f222fc2c":{"x":1374,"y":-6},"PythonUDFV2-operator-ed722c36-cee1-4b9d-bbb0-0f2ada4ed499":{"x":1512,"y":-4},"HTMLVisualizer-operator-0da06ab4-74e2-4173-9c74-8b180cd28ef3":{"x":1652,"y":-4},"SimpleSink-operator-7c269aaa-dec2-479a-88aa-a56943abfb7e":{"x":1450,"y":152},"CSVFileScan-operator-6345be4d-777a-4af1-95c7-fc65d8909e38":{"x":990,"y":334},"SimpleSink-operator-344d67dc-b5a7-4a71-b007-29475f223ec5":{"x":1788,"y":330},"PythonUDFV2-operator-912e87e9-918e-4f21-9c09-4c279434b6e7":{"x":1234,"y":328},"Aggregate-operator-85a42d42-fc56-4115-a8b1-da3efbb058ad":{"x":1374,"y":328},"PythonUDFV2-operator-524b8fd1-7a1a-4cea-a44d-82a820a2394c":{"x":1514,"y":330},"HTMLVisualizer-operator-3eee53c2-e0ad-4330-be78-007a049eb3f2":{"x":1652,"y":330},"SimpleSink-operator-89fc86e0-8c81-4d81-9a14-db7e0ee0a484":{"x":1450,"y":486},"CSVFileScan-operator-e50060f5-672e-464c-93ba-ad22428f2632":{"x":1010,"y":646},"SimpleSink-operator-6117e893-cdab-429a-85ac-4579a82c7285":{"x":1810,"y":642},"PythonUDFV2-operator-3349541d-180b-4306-9317-1eda68793e89":{"x":1254,"y":640},"Aggregate-operator-73bf257e-cc19-47a6-88bd-d5dc65e7bf73":{"x":1394,"y":640},"PythonUDFV2-operator-736a9f89-3fcc-4b20-8519-be215f081c15":{"x":1534,"y":642},"HTMLVisualizer-operator-8cb95961-c82d-4751-939c-5a98021269c5":{"x":1672,"y":642},"SimpleSink-operator-8f10d1fe-5857-4fb9-b4b9-538b2517bc5c":{"x":1470,"y":798},"CSVFileScan-operator-6140f838-966a-4979-a981-79a4c73adbc4":{"x":1010,"y":936},"SimpleSink-operator-980d2b9e-b374-49ae-9855-d8f04552a589":{"x":1810,"y":932},"PythonUDFV2-operator-4f67161f-1365-4b76-9ab0-d8438e4cbeef":{"x":1254,"y":930},"Aggregate-operator-d2f83f7f-2d51-40a0-b44d-57d112998869":{"x":1394,"y":930},"PythonUDFV2-operator-cd4a6a3e-58d0-48a4-8289-268d67488119":{"x":1534,"y":932},"HTMLVisualizer-operator-5d35d815-b8d4-4b25-974e-869cff4b1b67":{"x":1672,"y":932},"SimpleSink-operator-cf5c1dfb-0cd8-4cea-afe8-e1fbaf286fed":{"x":1470,"y":1088}},"links":[{"linkID":"link-1d09c0be-7a84-4933-8e7f-79e5e9ec57b5","source":{"operatorID":"PythonUDFV2-operator-bad59eab-34a4-4522-ae50-fd5c8240c470","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-c7f1280c-2b11-4b09-8a63-6f03cdfa70d1","portID":"input-0"}},{"linkID":"link-032418d6-0728-4d33-939f-6eab61e5eab6","source":{"operatorID":"Aggregate-operator-c7f1280c-2b11-4b09-8a63-6f03cdfa70d1","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-b7790a5e-86fe-4c51-9460-501ebdf9094c","portID":"input-0"}},{"linkID":"link-23225969-2166-48bd-ae23-680268eb9362","source":{"operatorID":"PythonUDFV2-operator-b7790a5e-86fe-4c51-9460-501ebdf9094c","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-00c135c5-3704-4e16-903e-b0c9526a473a","portID":"input-0"}},{"linkID":"link-5639d126-058c-4ab2-91fd-637d5ec43836","source":{"operatorID":"HTMLVisualizer-operator-00c135c5-3704-4e16-903e-b0c9526a473a","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-2e7eb242-42a8-4881-bd40-aa394cdaf7c6","portID":"input-0"}},{"linkID":"4f96f623-665a-4e58-a3e6-0f573f26b78c","source":{"operatorID":"Aggregate-operator-c7f1280c-2b11-4b09-8a63-6f03cdfa70d1","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-e4340b7b-97dd-47a4-92a2-b85c7d08ee23","portID":"input-0"}},{"linkID":"88e6aa32-df98-4081-b27a-9c38cf7ecce8","source":{"operatorID":"CSVFileScan-operator-cc09d5a9-7165-42ab-a4cb-7b137abde53e","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-bad59eab-34a4-4522-ae50-fd5c8240c470","portID":"input-0"}},{"linkID":"link-f19c398d-3dc2-4948-b9a8-82ac60b81c3f","source":{"operatorID":"PythonUDFV2-operator-a1693e51-1135-46d7-84c8-0df4e6436484","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-6e0a4390-28a9-473a-b4b8-b885b55d5997","portID":"input-0"}},{"linkID":"link-1857de86-0828-45cc-92e5-7c1d1df9befe","source":{"operatorID":"Aggregate-operator-6e0a4390-28a9-473a-b4b8-b885b55d5997","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-b415adc7-b2d1-4fa4-81d9-2aca638e3508","portID":"input-0"}},{"linkID":"link-a82c29cb-4d78-4b88-ad0b-89d944fa1138","source":{"operatorID":"PythonUDFV2-operator-b415adc7-b2d1-4fa4-81d9-2aca638e3508","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-93bd4861-7f8d-4df5-a451-9d16e0c433ca","portID":"input-0"}},{"linkID":"link-5bc974c2-21a5-45d6-a529-319b85d07176","source":{"operatorID":"HTMLVisualizer-operator-93bd4861-7f8d-4df5-a451-9d16e0c433ca","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-27214745-ca49-4b82-8cc6-516d28011ba9","portID":"input-0"}},{"linkID":"link-6fb529d1-2735-42ad-b65a-7b4900d25e50","source":{"operatorID":"Aggregate-operator-6e0a4390-28a9-473a-b4b8-b885b55d5997","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-2ca95882-1ec5-4ebc-8e21-7b5f71de95e6","portID":"input-0"}},{"linkID":"link-076cb315-761b-4b7f-95f3-ca4be1d2ec52","source":{"operatorID":"CSVFileScan-operator-c46bdbf8-7e54-4751-8d6c-721332810acd","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-a1693e51-1135-46d7-84c8-0df4e6436484","portID":"input-0"}},{"linkID":"link-8700185d-3cac-4f7d-876c-42f4a183a58a","source":{"operatorID":"PythonUDFV2-operator-c17b6cab-2203-4d0e-88bf-427bf88cf401","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-6f9d9394-ebb0-44fe-ae5a-4d4eb43341c0","portID":"input-0"}},{"linkID":"link-0ea9c668-766c-424f-bef4-505636c86aef","source":{"operatorID":"Aggregate-operator-6f9d9394-ebb0-44fe-ae5a-4d4eb43341c0","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-fa415a9f-fc95-40ed-8730-79592178110b","portID":"input-0"}},{"linkID":"link-01e554ef-dfd8-4633-afb6-570d56dfc880","source":{"operatorID":"PythonUDFV2-operator-fa415a9f-fc95-40ed-8730-79592178110b","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-0e1f859a-b39b-493c-bbeb-9670b13f6772","portID":"input-0"}},{"linkID":"link-b7323347-0740-41f2-9e6d-e579b164a775","source":{"operatorID":"HTMLVisualizer-operator-0e1f859a-b39b-493c-bbeb-9670b13f6772","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-898784dc-d389-46a1-8c88-dccf3ade1891","portID":"input-0"}},{"linkID":"link-2cc06376-9700-4c72-a148-f3da68efff5f","source":{"operatorID":"Aggregate-operator-6f9d9394-ebb0-44fe-ae5a-4d4eb43341c0","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-13b690f9-4045-4ae0-a249-e5740bf39ad9","portID":"input-0"}},{"linkID":"link-c8c80bec-df29-4aa5-a81b-168b5d0ca376","source":{"operatorID":"CSVFileScan-operator-dc409a84-5350-4ee2-b40b-73d5e66ecc63","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-c17b6cab-2203-4d0e-88bf-427bf88cf401","portID":"input-0"}},{"linkID":"link-f77ad634-f819-4190-a6aa-362c035ed20f","source":{"operatorID":"PythonUDFV2-operator-4680c3fa-db90-4129-aee3-b2ba0879a86e","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-a52581d0-a74f-4cfa-9fea-f6dc354c9e0a","portID":"input-0"}},{"linkID":"link-4bf5e070-0d0b-40c4-8bbb-ba77a0d6b6c4","source":{"operatorID":"Aggregate-operator-a52581d0-a74f-4cfa-9fea-f6dc354c9e0a","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-5ac88245-207c-4952-84fc-192b2896574b","portID":"input-0"}},{"linkID":"link-840d1a90-dc6c-4e3f-b92a-e1fd3e8f7689","source":{"operatorID":"PythonUDFV2-operator-5ac88245-207c-4952-84fc-192b2896574b","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-be5d2d5d-1358-4223-bd0a-3e1a91b48633","portID":"input-0"}},{"linkID":"link-ee2c6b22-25a5-4b27-8b2a-e612d80412d9","source":{"operatorID":"HTMLVisualizer-operator-be5d2d5d-1358-4223-bd0a-3e1a91b48633","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-bbdb47e8-c6a5-4d92-9108-cb30f7b8e121","portID":"input-0"}},{"linkID":"link-3ef61907-72fd-42ba-8462-857a86c8acca","source":{"operatorID":"Aggregate-operator-a52581d0-a74f-4cfa-9fea-f6dc354c9e0a","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-da5e1f56-5d6f-4647-9f51-8090f6a1e702","portID":"input-0"}},{"linkID":"link-9c4b908f-fcef-4095-af63-d0cc7a20342a","source":{"operatorID":"CSVFileScan-operator-f730ee0e-5c9d-40af-9b24-0bd15596a684","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-4680c3fa-db90-4129-aee3-b2ba0879a86e","portID":"input-0"}},{"linkID":"link-9e8b2bbe-cbd6-4199-8a4b-774dd5d46314","source":{"operatorID":"PythonUDFV2-operator-dea69ff2-8ed6-4920-8bef-e72def2df287","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-105a9f25-8334-4e15-a4a8-89bb98109af3","portID":"input-0"}},{"linkID":"link-649ef102-6d34-4515-a55f-dfb15e099671","source":{"operatorID":"Aggregate-operator-105a9f25-8334-4e15-a4a8-89bb98109af3","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-b9176476-d398-4a05-a095-7b20cbf6e928","portID":"input-0"}},{"linkID":"link-a981b10c-3e1d-4da9-9522-ad6e65fc700f","source":{"operatorID":"PythonUDFV2-operator-b9176476-d398-4a05-a095-7b20cbf6e928","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-a3466f92-b6ff-4576-a409-1513f24913ca","portID":"input-0"}},{"linkID":"link-30542712-a034-4eeb-8b46-c0178a68a038","source":{"operatorID":"HTMLVisualizer-operator-a3466f92-b6ff-4576-a409-1513f24913ca","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-0c5a2762-0448-490e-b49a-545d94fee59a","portID":"input-0"}},{"linkID":"link-061840a7-0a95-42fd-b4e4-1f76102e05fc","source":{"operatorID":"Aggregate-operator-105a9f25-8334-4e15-a4a8-89bb98109af3","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-8f0c6612-2537-424d-a74d-ab4b18631599","portID":"input-0"}},{"linkID":"link-3f9fa22d-9bf9-4de1-92f5-14d4df1c10bf","source":{"operatorID":"CSVFileScan-operator-16606aad-b074-4c55-a871-732a22ecb182","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-dea69ff2-8ed6-4920-8bef-e72def2df287","portID":"input-0"}},{"linkID":"link-a4051445-3e57-402f-b1ec-b34e050c28a9","source":{"operatorID":"PythonUDFV2-operator-3a4482af-fea4-4871-a16d-edd0daecf42a","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-45bcedeb-d655-4a8a-90b9-a070f222fc2c","portID":"input-0"}},{"linkID":"link-1181296c-1ba2-4853-8949-a088b5b8658e","source":{"operatorID":"Aggregate-operator-45bcedeb-d655-4a8a-90b9-a070f222fc2c","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-ed722c36-cee1-4b9d-bbb0-0f2ada4ed499","portID":"input-0"}},{"linkID":"link-10614908-a54d-41bc-bc89-783c0c39d051","source":{"operatorID":"PythonUDFV2-operator-ed722c36-cee1-4b9d-bbb0-0f2ada4ed499","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-0da06ab4-74e2-4173-9c74-8b180cd28ef3","portID":"input-0"}},{"linkID":"link-b0c136e8-687b-49b3-9571-4db780f35cc0","source":{"operatorID":"HTMLVisualizer-operator-0da06ab4-74e2-4173-9c74-8b180cd28ef3","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-4d939477-a161-4c6a-8e87-c0c2aa15860f","portID":"input-0"}},{"linkID":"link-bb2297fd-51f8-4a5d-a7f5-d8a708cae259","source":{"operatorID":"Aggregate-operator-45bcedeb-d655-4a8a-90b9-a070f222fc2c","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-7c269aaa-dec2-479a-88aa-a56943abfb7e","portID":"input-0"}},{"linkID":"link-b00e9ff5-7df0-4655-93d5-3148832a17a8","source":{"operatorID":"CSVFileScan-operator-5165580c-82dd-4f8a-98b7-72180e741945","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-3a4482af-fea4-4871-a16d-edd0daecf42a","portID":"input-0"}},{"linkID":"link-0c4ee9fa-d321-4fc7-bcf4-0d4dbd47762a","source":{"operatorID":"PythonUDFV2-operator-912e87e9-918e-4f21-9c09-4c279434b6e7","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-85a42d42-fc56-4115-a8b1-da3efbb058ad","portID":"input-0"}},{"linkID":"link-10ce823b-6430-4e4c-b281-2523bb5ae727","source":{"operatorID":"Aggregate-operator-85a42d42-fc56-4115-a8b1-da3efbb058ad","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-524b8fd1-7a1a-4cea-a44d-82a820a2394c","portID":"input-0"}},{"linkID":"link-e782a81e-e0e2-4552-a3bf-c86bd3f1ca36","source":{"operatorID":"PythonUDFV2-operator-524b8fd1-7a1a-4cea-a44d-82a820a2394c","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-3eee53c2-e0ad-4330-be78-007a049eb3f2","portID":"input-0"}},{"linkID":"link-b6f02131-24b0-4703-8552-ebc76a6e7a1d","source":{"operatorID":"HTMLVisualizer-operator-3eee53c2-e0ad-4330-be78-007a049eb3f2","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-344d67dc-b5a7-4a71-b007-29475f223ec5","portID":"input-0"}},{"linkID":"link-961653e1-5c85-4a40-9b17-cc11bb01bbc1","source":{"operatorID":"Aggregate-operator-85a42d42-fc56-4115-a8b1-da3efbb058ad","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-89fc86e0-8c81-4d81-9a14-db7e0ee0a484","portID":"input-0"}},{"linkID":"link-eb589156-0b29-4f86-8b35-3237e6cf4754","source":{"operatorID":"CSVFileScan-operator-6345be4d-777a-4af1-95c7-fc65d8909e38","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-912e87e9-918e-4f21-9c09-4c279434b6e7","portID":"input-0"}},{"linkID":"link-213ee03f-5b09-4389-94c9-1c1dd7d03c97","source":{"operatorID":"PythonUDFV2-operator-3349541d-180b-4306-9317-1eda68793e89","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-73bf257e-cc19-47a6-88bd-d5dc65e7bf73","portID":"input-0"}},{"linkID":"link-85b0b592-a597-4511-bdb9-6afec61cd1c6","source":{"operatorID":"Aggregate-operator-73bf257e-cc19-47a6-88bd-d5dc65e7bf73","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-736a9f89-3fcc-4b20-8519-be215f081c15","portID":"input-0"}},{"linkID":"link-b3c33932-5f42-44c5-8d03-aa54607372b1","source":{"operatorID":"PythonUDFV2-operator-736a9f89-3fcc-4b20-8519-be215f081c15","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-8cb95961-c82d-4751-939c-5a98021269c5","portID":"input-0"}},{"linkID":"link-72bdd89f-aeec-4da4-887a-f52fd3418b7b","source":{"operatorID":"HTMLVisualizer-operator-8cb95961-c82d-4751-939c-5a98021269c5","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-6117e893-cdab-429a-85ac-4579a82c7285","portID":"input-0"}},{"linkID":"link-5cf34603-29d7-44a9-9771-0957a4b2b13a","source":{"operatorID":"Aggregate-operator-73bf257e-cc19-47a6-88bd-d5dc65e7bf73","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-8f10d1fe-5857-4fb9-b4b9-538b2517bc5c","portID":"input-0"}},{"linkID":"link-e9362b88-2617-435d-a362-ee2b92715446","source":{"operatorID":"CSVFileScan-operator-e50060f5-672e-464c-93ba-ad22428f2632","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-3349541d-180b-4306-9317-1eda68793e89","portID":"input-0"}},{"linkID":"link-f3aee4c0-1995-4f3f-9c09-886881facf87","source":{"operatorID":"PythonUDFV2-operator-4f67161f-1365-4b76-9ab0-d8438e4cbeef","portID":"output-0"},"target":{"operatorID":"Aggregate-operator-d2f83f7f-2d51-40a0-b44d-57d112998869","portID":"input-0"}},{"linkID":"link-1ebb02c0-a796-4973-848f-2e3bee081482","source":{"operatorID":"Aggregate-operator-d2f83f7f-2d51-40a0-b44d-57d112998869","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-cd4a6a3e-58d0-48a4-8289-268d67488119","portID":"input-0"}},{"linkID":"link-09e32107-6969-44ae-9284-f07bf75bf983","source":{"operatorID":"PythonUDFV2-operator-cd4a6a3e-58d0-48a4-8289-268d67488119","portID":"output-0"},"target":{"operatorID":"HTMLVisualizer-operator-5d35d815-b8d4-4b25-974e-869cff4b1b67","portID":"input-0"}},{"linkID":"link-b0956aa5-0847-4c22-b426-3eebaafc46ac","source":{"operatorID":"HTMLVisualizer-operator-5d35d815-b8d4-4b25-974e-869cff4b1b67","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-980d2b9e-b374-49ae-9855-d8f04552a589","portID":"input-0"}},{"linkID":"link-01dc1f3e-beb3-4902-8880-e15858e0dd3b","source":{"operatorID":"Aggregate-operator-d2f83f7f-2d51-40a0-b44d-57d112998869","portID":"output-0"},"target":{"operatorID":"SimpleSink-operator-cf5c1dfb-0cd8-4cea-afe8-e1fbaf286fed","portID":"input-0"}},{"linkID":"link-e41690ea-f154-4c78-91d6-8f9defb9bb72","source":{"operatorID":"CSVFileScan-operator-6140f838-966a-4979-a981-79a4c73adbc4","portID":"output-0"},"target":{"operatorID":"PythonUDFV2-operator-4f67161f-1365-4b76-9ab0-d8438e4cbeef","portID":"input-0"}}],"groups":[],"breakpoints":{},"commentBoxes":[]}